    let x = e.offsetX;
    let progressWidthval = progressBar.clientWidth + 2;

    previewArea.style.setProperty("--x", `${x}px`);
    if (x >= progressWidthval - 80) {
      x = progressWidthval - 80;
    } else if (x <= 75) {
      x = 75;
    } else {
      x = e.offsetX;
    }


    var w = Number(window.getComputedStyle(rangeProgress).width.replace(/[^0-9]/g, ''))

    if((previewMath*w)/100 <= 85){
        previewArea.style.left = '0px'
    }else if((previewMath*w)/100 >= w-85){
        previewArea.style.left = w-170 + 'px'
    }else{
        previewArea.style.left = ((previewMath*w)/100)-85 + 'px'
    }

    calc(var(--preview-position) * 100%)

    left: calc(var(--x) + 11px);

    left: calc(var(--x) - 100px);

    if (percent <= 13) {
      previewArea.style.left = '0%';
  } else if (percent >= 80) {
      previewArea.style.left = '75%';
  }


    let x = e.offsetX;
    let progressWidthval = progressBar.clientWidth;

    previewArea.style.setProperty("--x", `${x}px`);


    if (y <= 14) {
      previewArea.style.left =`12px`
  } else if (y >= 1048) {
      previewArea.style.right =`12px`
  }
  
  else {
      previewArea.style.left =`${y}px`;
  }


  let x = e.offsetX;

  let y = x - 100;

  if (y <= 10) {
      previewArea.style.left =`10px`
  }
  else {
      previewArea.style.left =`${y}px`;
  }

  13%

  previewArea.style.left =`${percent}%`;

    console.log(`${percent}%`)



    previewArea.style.left =`${percent}%`;



    console.log(`${percent}%`)


    previewArea.style.display = 'block'



    previewArea.style.left =`${percent}%`;

    if (percent <= 13) {
        previewArea.style.left =`0%`
    }

    console.log(`${percent}%`)



    if (y <= 10) {
        previewArea.style.left =`10px`
    } else if (x >= progressWidthval - 115) {
        previewArea.style.left ='';
        if (!document.fullscreenElement) {
            previewArea.style.right =`10px`
        } else {
            previewArea.style.right =`18px`
        }
    } else {
        previewArea.style.left =`${y}px`;
    }

    console.log(`${y}px`)

    current.textContent = sortedTime;


    rangeProgress.value = proggres * 100;

    rangeProgress.addEventListener('input', function(){
        const time = (rangeProgress.value / 100) * mainVideo.duration;
        mainVideo.currentTime = time;
        progressShadow.style.setProperty("--progressShadow", rangeProgress.value / 100);
    });


    mainVideo.addEventListener('timeupdate', function() {
        const proggres = (mainVideo.currentTime / mainVideo.duration);
        progressShadow.style.setProperty("--progressShadow", proggres);
        rangeProgress.value = proggres * 100;
    });

    let togglePlaybackStatus = customPlaybackStatus.getAttribute("data-speed");


    /*controllersContainer */

/* */
/* */
/* */

    #containerAV {
        display: flex;
        position: absolute;
        width: 100%;
        height: 30%;
        pointer-events: none;
        user-select: none;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        overflow: hidden;
        z-index: 4;
        bottom: 0;
        border-bottom-left-radius: 0px;
        border-bottom-right-radius: 0px;
    }
    #audioVisualizer {
        position: relative;
        display: flex;
        width: 100%;
        height: 100%;
    }


    .fulscreenMobileCustom {
        width: 100%;
        height:100vh;
    }

    customPlaybackStatus=videoPlayer.querySelector('#customPlaybackStatus'),

    customPlaybackNotif=videoPlayer.querySelector("#customPlaybackNotif"),
    rewindNotif=videoPlayer.querySelector('.rewindNotif'),
arrowLOne=videoPlayer.querySelector('.arrowLOne'),
arrowLTwo=videoPlayer.querySelector('.arrowLTwo'),
arrowLThree=videoPlayer.querySelector('.arrowLThree'),
rewindTime=videoPlayer.querySelector('.arrowLThree'),
forwardNotif=videoPlayer.querySelector('.forwardNotif'),
arrowROne=videoPlayer.querySelector('.arrowROne'),
arrowRTwo=videoPlayer.querySelector('.arrowRTwo'),
arrowRThree=videoPlayer.querySelector('.arrowRThree'),

mainVideo.addEventListener('ended' ,myHandler,false);
function myHandler(){
    alert('meme')
    playPauseIcon.src = "./assets/icons/Replay-icon.svg";
    playPauseMobileIcon.src = "./assets/icons/Replay-icon.svg";
};

mainVideo.addEventListener('ended' ,myHandler,false);
function myHandler(){
    playPauseIcon.src = "./assets/icons/Replay-icon.svg";
    playPauseMobileIcon.src = "./assets/icons/Replay-icon.svg";
};

console.log('user clicked: ', event.target);


.icon .auto-play.active::before {
    content: "\e037";
    font-family: "material symbols outlined";
    filter: invert(100%);
    left: 15px;
    background: #000000;
}

        if (mainVideo.classList.contains("play")) {
            mainVideo.pause()
          } else {
            mainVideo.pause()
          }

          right: 5px;
          margin-left: 20px;
          cursor: pointer; 
          text-decoration: underline;
          outline: none;

          <button id="customLinkRangePlayback">Custom</button>

          #customLinkRangePlayback:focus {
            outline-offset: 3px;
            outline: 2px solid rgb(28, 142, 255);
        }

        right: 5px;
        margin-left: 20px;
        cursor: pointer; 
        text-decoration: underline;
        padding: 0;
        outline: none;

        .customRangePlayback span {
            display: block;
            font-size: 14px;
            font-weight: 300px;
            text-align: center;
        }

        margin-left: 10px;
        margin-right: 10px;

        document.addEventListener('keydown',(event) => {
            const {activeElement} = document
            const hasButtonRole = activeElement?.getAttribute('role') === 'button'
            if (hasButtonRole) {
                if (['Spacebar', ' ', 'Enter'].includes(event.key)) {
                    event.preventDefault()
                }
                if (event.key === 'Enter') {
                    activeElement.click()
                }
            }
        })
        document.addEventListener('keyup',(event) => {
            const {activeElement} = document
            const hasButtonRole = activeElement?.getAttribute('role') === 'button'
            if (hasButtonRole && ['Spacebar', ' ', ].includes(event.key)) {
                event.preventDefault()
                activeElement.click()
            }
        })

        case " ":
            if (tagName === "button") return
          case "k":
              togglePlay()
            break




            mainVideo.muted = !mainVideo.muted;
            if (mainVideo.muted) {
                volumeRange.value = '0';
                volumeBtnIcon.src = "./assets/icons/Volume-off-icon.svg";
                volumeBtnIcon.title = "Unmute"
            } else {
                volumeRange.value = mainVideo.volume * 100;
                volumeBtnIcon.src = "./assets/icons/Volume-up-icon.svg";
                volumeBtnIcon.title = "Mute"
            }

            else if (volumeRange.value == 0){
                mainVideo.muted = false;
                mainVideo.volume = 0.4;
                volumeRange.value = 40;
                volumeBtnIcon.src = "./assets/icons/Volume-up-icon.svg";
                volumeBtnIcon.title = "Mute"
            }


            if (volumeRange.value == 0) {
                volumeRange.value = 80;
                mainVideo.volume = 0.8;
                volume.innerHTML = "volume_up";
              } else {
                volumeRange.value = 0;
                mainVideo.volume = 0;
                volume.innerHTML = "volume_off";
              }


              if (volumeRange.value == 0) {
                volumeRange.value = mainVideo.volume * 100;
                mainVideo.muted = false;
                volumeBtnIcon.src = "./assets/icons/Volume-up-icon.svg";
                volumeBtnIcon.title = "Mute"
              } else {
                volumeRange.value = 0;
                mainVideo.muted = true;
                volumeBtnIcon.src = "./assets/icons/Volume-off-icon.svg";
                volumeBtnIcon.title = "Unmute"
              }

    mainVideo.muted = !mainVideo.muted;
    if (mainVideo.muted) {
        volumeRange.value = '0';
        volumeBtnIcon.src = "./assets/icons/Volume-off-icon.svg";
        volumeBtnIcon.title = "Unmute"
    } else {
        volumeRange.value = mainVideo.volume * 100;
        volumeBtnIcon.src = "./assets/icons/Volume-up-icon.svg";
        volumeBtnIcon.title = "Mute"
    }


    rangeCustomPlayback.addEventListener('input',() => {
        let cusPlayback = rangeCustomPlayback.value / 100;
        mainVideo.playbackRate = cusPlayback;

        let speed = playback.getAttribute("data-speed");
        PlaybackRangeValue.textContent = `${cusPlayback}x`;
        if (cusPlayback == speed) {
            removePlaybackActiveClasses(playback);
            playback.classList.add("active");
            customPlaybackStatus.classList.remove('active')
        } else if (cusPlayback !== speed) {
            removePlaybackActiveClasses(playback);
            playback.classList.add("active");
            customPlaybackStatus.classList.add('active')
        }

        playbackStatus.textContent = cusPlayback;
        if (cusPlayback == 1) {
            playbackStatus.textContent = "Normal";
        }
    })
})


playback.forEach(playback => {
    playback.addEventListener('click',() => {
        removePlaybackActiveClasses(playback);
        playback.classList.add("active");

        let speed = playback.getAttribute("data-speed");

        rangeCustomPlayback.value = speed * 100;

        let cusPlayback = rangeCustomPlayback.value / 100;
        mainVideo.playbackRate = cusPlayback;
        
        PlaybackRangeValue.textContent = `${cusPlayback}x`;

        playbackStatus.textContent = speed;
        if (speed == 1) {
            playbackStatus.textContent = "Normal";
        }
    })

    rangeCustomPlayback.addEventListener('input',() => {
        let cusPlayback = rangeCustomPlayback.value / 100;
        mainVideo.playbackRate = cusPlayback;

        let speed = playback.getAttribute("data-speed");
        let cSdataSpeed = customPlaybackStatus.getAttribute("data-speed");
        cSdataSpeed = cusPlayback;
        PlaybackRangeValue.textContent = `${cusPlayback}x`;
        if (cusPlayback == speed) {
            removePlaybackActiveClasses(playback);
            playback.classList.add("active");
        }

        playbackStatus.textContent = cusPlayback;
        if (cusPlayback == 1) {
            playbackStatus.textContent = "Normal";
        }
    })
})
function removePlaybackActiveClasses() {
    playback.forEach(playback => {
        playback.classList.remove("active");
    })
}




playback.forEach(playback => {
    playback.addEventListener('click',() => {
        removePlaybackActiveClasses(playback);
        playback.classList.add("active");

        let speed = playback.getAttribute("data-speed");
        

        rangeCustomPlayback.value = speed || cSdataSpeed * 100;

        let cusPlayback = rangeCustomPlayback.value / 100;
        mainVideo.playbackRate = cusPlayback;
        
        PlaybackRangeValue.textContent = `${cusPlayback}x`;

        playbackStatus.textContent = speed;
        if (speed == 1) {
            playbackStatus.textContent = "Normal";
        }
    })

    rangeCustomPlayback.addEventListener('input',() => {
        let cusPlayback = rangeCustomPlayback.value / 100;
        
        mainVideo.playbackRate = cusPlayback;

        let speed = playback.getAttribute("data-speed");
        let cSdataSpeed = customPlaybackStatus.getAttribute("data-speed");
        cSdataSpeed = `${cusPlayback}`;


        customPlaybackStatus.textContent = `${cusPlayback}`;
        PlaybackRangeValue.textContent = `${cusPlayback}x`;
        
        if (cusPlayback == speed) {
            removePlaybackActiveClasses(playback);
            playback.classList.add("active");
            customPlaybackStatus.classList.add('active')
            cSdataSpeed = `${cusPlayback - 0.05}`;
            customPlaybackStatus.textContent = `${cusPlayback - 0.05}`;
        } 

        playbackStatus.textContent = cusPlayback;
        if (cusPlayback == 1) {
            playbackStatus.textContent = "Normal";
        }
    })
})
function removePlaybackActiveClasses() {
    playback.forEach(playback => {
        playback.classList.remove("active");
    })
}

if (cusPlayback == 0.25 || 0.5 || 0.75 || 1 || 1.25 || 1.5 || 1.75 || 2) {
    removePlaybackActiveClasses(playback);
    playback.classList.add("active");
    customPlaybackStatus.classList.add('active')
    cSdataSpeed = `${cusPlayback - 0.05}`;
    customPlaybackStatus.textContent = `${cusPlayback - 0.05}`;
} 


playback.addEventListener('click',() => {
    removePlaybackActiveClasses(playback);
    playback.classList.add("active");

    let speed = playback.getAttribute("data-speed");
    
    rangeCustomPlayback.value = cSdataSpeed * 100;

    let cusPlayback = rangeCustomPlayback.value / 100;
    mainVideo.playbackRate = cusPlayback;
    
    PlaybackRangeValue.textContent = `${cusPlayback}x`;

    playbackStatus.textContent = speed;
    if (speed == 1) {
        playbackStatus.textContent = "Normal";
    }
})

mainVideoClickF.addEventListener('click', togglePlay);
rangeProgress.classList.add("active");

autoplay.classList.toggle("active");

controllersMobile.addEventListener('click',() => {
    headerControllers.classList.toggle('active');
    controllers.classList.toggle('active');
    controllersMobile.classList.toggle('active');
});

break 1.8
dropin 1.2

blockCenter.addEventListener('click',() => {
    headerControllers.classList.remove('active');
    controllers.classList.remove('active');
    controllersMobile.classList.remove('active');
})

   width: 97.5%;

   let progressWidthgal = progressBarBufBg.clientWidth + 2;
   let M = e.offsetX;
   let videoDuration = mainVideo.duration;
   let progressTime = Math.floor((M / progressWidthgal) * videoDuration);
   let currentMin = Math.floor(progressTime / 60);
   let currentSec = Math.floor(progressTime % 60);
   currentSec < 10 ? (currentSec = "0" + currentSec) : currentSec;
   previewAreaSpan.innerHTML = `${currentMin} : ${currentSec}`;

   let sortedTime = formatDuration((percent*mainVideo.duration)/100);
   previewAreaSpan.innerHTML = sortedTime;


const formatTime = (time) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;
};

rangeProgress.addEventListener('mousemove', (e) => {
    const rect = progressBarBufBg.getBoundingClientRect();
    const offsetX = e.clientX - rect.left;
    const percentage = offsetX / rect.width;
    const time = percentage * video.duration;

    // Show the preview time
    previewTime.textContent = formatTime(time);
    previewTime.style.display = 'block';
});

rangeProgress.addEventListener('mouseleave', () => {
    previewTime.style.display = 'none';
});

function setTimelinePosition(e){
    const rect = progressBarBufBg.getBoundingClientRect()
    const percent = (Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width)*100;

    let sortedTime = formatDuration((percent*mainVideo.duration)/100);
    current.textContent = sortedTime;
}







progressBarBufBg.onmouseup = () => mouseUp()
progressBarBufBg.onmouseout = () => progressbarMouseout()
progressBarBufBg.onmousedown = () => updatePlayerTime()
progressBarBufBg.onmouseover = (e) => showPreviewProgress(e)
progressBarBufBg.onmousemove = (e) => showPreviewProgress(e)

progressBarBufBg.addEventListener("pointerdown", (e) => {
    progressBarBufBg.setPointerCapture(e.pointerId);
    setTimelinePosition(e);
    progressBarBufBg.addEventListener("pointermove", setTimelinePosition);
    progressBarBufBg.addEventListener("pointerup", () => {
        progressBarBufBg.removeEventListener("pointermove", setTimelinePosition);
    })
});

function updatePlayerTime() {
    thumbnail.style.display = "block";
}

function mouseUp() {
    thumbnail.style.display = "none";
}

function setTimelinePosition(e){
    const rect = progressBarBufBg.getBoundingClientRect()
    const percent = (Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width)*100;

    let sortedTime = formatDuration((percent*mainVideo.duration)/100);
    current.textContent = sortedTime;
}

function showPreviewProgress(e){
    const rect = progressBarBufBg.getBoundingClientRect()
    const percent = (Math.min(Math.max(0, e.x - rect.x), rect.width) / rect.width)*100;

    progressPreview.style.width = percent + '%';
    progressPreview.classList.add('active');

    let progressWidthval = progressBar.clientWidth;
    let x = e.offsetX;
    let y = x - 100;

    if (y <= 10) {
        previewArea.style.left =`10px`
    } else if (x >= progressWidthval - 115) {
        previewArea.style.left ='';
        if (!document.fullscreenElement) {
            previewArea.style.right =`10px`
        } else {
            previewArea.style.right =`18px`
        }
    } else {
        previewArea.style.left =`${y}px`;
    }

    previewArea.style.display = 'block'

    let sortedTime = formatDuration((percent*mainVideo.duration)/100);
    previewAreaSpan.innerHTML = sortedTime;

    let me = mainVideo.duration/115;

    var previewImageNumber = (Math.floor((percent-0.01)/me)) +1;
    console.log(previewImageNumber)

    if(previewImageNumber > 0){ previewAreaImg.src = `./assets/prevJosukeImg/preview${previewImageNumber}.jpg` }
    if(previewImageNumber > 0){ thumbnailImg.src = `./assets/prevJosukeImg/preview${previewImageNumber}.jpg`}
}

function progressbarMouseout(){
    previewArea.style.display = 'none'
    progressPreview.classList.remove('active')
}

progressHead.style.left = progressWidth + '%';

.progressShadow::before {
    content: "";
    position: absolute;
    width: 14px;
    height: 14px;
    border-radius: 50%;
    right: -6.5px;
    top: 50%;
    transform: translateY(-50%);
    background: rgb(255, 0, 0);
    opacity: 0;
    transition: 150ms linear;
}

.progressShadow.show::before {
    opacity: 1;
}

<div class="settingsContainer">
                    <div class="mainSettings">
                        <div class="settingList">
                            <button id="ambientBtn">
                                <img draggable="false" src="./assets/icons/Setting-icon.svg" id="settingsIconL">
                                <div class="settingsTextContainer"><p class="sBtnL">Ambient Mode</p></div>
                                <label class="switch" style="pointer-events: none; bottom: -1px;">
                                    <input type="checkbox" tabindex="-1">
                                    <span class="slider round active"></span>
                                </label>
                            </button>
                            <button id="CaptionListBtn">
                                <img draggable="false" src="./assets/icons/Caption-icon.svg" id="settingsIconL">
                                <div class="settingsTextContainer"><p class="sBtnL">Caption</p><p class="sBtnR" id="CaptionStatus">Off</p></div><img draggable="false" src="./assets/icons/Chevron-right.svg" id="settingsIconR">
                            </button>
                            <button id="playbackSpeedBtn">
                                <img draggable="false" src="./assets/icons/Playback-Speedf-icon.svg" id="settingsIconL">
                                <div class="settingsTextContainer"><p class="sBtnL">Playback speed</p><p class="sBtnR" id="playbackStatus">Normal</p></div><img draggable="false" src="./assets/icons/Chevron-right.svg" id="settingsIconR">
                            </button>
                            <button id="qualityBtn">
                                <img draggable="false" src="./assets/icons/Qualityicon.svg" id="settingsIconL">
                                <div class="settingsTextContainer"><p class="sBtnL">Quality</p><p class="sBtnR" id="qualityStatus">Auto (360p)</p></div><img draggable="false" src="./assets/icons/Chevron-right.svg" id="settingsIconR">
                            </button>
                        </div>

                        <div class="captionList">
                            <div class="caption">
                                <span>
                                    <button id="captionCloseBtn"><img draggable="false" src="./assets/icons/Chevron-left.svg"></button>
                                    <p>Select Subtitle</p>
                                </span>
                              <ul>

                              </ul>
                            </div>
                        </div>

                        <div class="playbackList">
                            <ul>
                                <button id="playbackCloseBtn"><img draggable="false" src="./assets/icons/Chevron-left.svg"></button>
                                <span>Playback Speed</span><button id="customLinkRangePlayback">Custom</button>
                            </ul>
                            <div class="playbackBtnList">
                                <button data-speed="" id="customPlaybackStatus"></button>
                                <button data-speed="0.25" id="speedFix">0.25</button>
                                <button data-speed="0.5" id="speedFix">0.5</button>
                                <button data-speed="0.75" id="speedFix">0.75</button>
                                <button data-speed="1" id="speedFix" class="active">Normal</button>
                                <button data-speed="1.25" id="speedFix">1.25</button>
                                <button data-speed="1.5" id="speedFix">1.5</button>
                                <button data-speed="1.75" id="speedFix">1.75</button>
                                <button data-speed="2" id="speedFix">2</button>
                            </div>
                        </div>
                        <div class="customRangePlayback">
                            <ul>
                                <button id="playbackRangeCloseBtn"><img draggable="false" src="./assets/icons/Chevron-left.svg"></button>
                                <span>Custom</span>
                            </ul>
                            <p id="PlaybackRangeValue">1x</p>
                            <input type="range" min="25" max="200" value="100" step="5" id="rangeCustomPlayback">
                        </div>

                        <div data-label="qualityList" class="qualityList">
                            <span>
                                <button id="qualityCloseBtn"><img draggable="false" src="./assets/icons/Chevron-left.svg"></button>
                                Playback Quality 
                            </span>
                            <ul>
                              <button data-quality="360" class="active" tabindex="0" role="button" id="deafultQuality">Auto (360p)</button>
                            </ul>
                        </div>
                    </div>
                </div>